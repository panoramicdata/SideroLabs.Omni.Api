name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersioning
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  pack:
    name: Pack NuGet
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersioning
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Pack
      run: dotnet pack SideroLabs.Omni.Api/SideroLabs.Omni.Api.csproj --configuration Release --no-build --output nupkg
      
    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: nupkg/*.nupkg

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: nupkg
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish to NuGet
      run: dotnet nuget push "nupkg/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
